### 1) Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
import sys
from lesson04 import module04

try:
    script, hours, money, bonus = sys.argv
except ValueError:
    print("Введены неправильные данные")

module04.salary_mod(hours, money, bonus)

##### module04.py #####
### 1) Расчет заработной платы сотрудника
def salary_mod(hours, money, bonus):
    salary = (int(hours) * int(money)) + int(bonus)
    print(salary)


### 2) Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
my_list_new = [x for num, x in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f'Исходный список: {my_list}')
print(f'Новый список: {my_list_new}')


### 3) Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.

print(f'Числа в пределах от 20 до 240, кратные 20 или 21: {[x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0]}')


### 4) Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
my_list_new = [x for x in my_list if my_list.count(x) < 2]
print(my_list_new)

### 5) Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

def range_list(x, y):
    return x * y

print(f'Список четных значений {[y for y in range(100, 1001) if y % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(range_list, [y for y in range(100, 1001) if y % 2 == 0])}')
